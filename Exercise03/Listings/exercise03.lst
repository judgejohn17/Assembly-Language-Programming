


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         ;*******************************************************
                       *********
    3 00000000         ;Exercise03
    4 00000000         ;This program solves a system of equations
    5 00000000         ;Name:  John Judge
    6 00000000         ;Date:  2/11/16
    7 00000000         ;Class:  CMPE-250
    8 00000000         ;Section:  Section 02, Thursdays 200PM-3:50PM
    9 00000000         ;-------------------------------------------------------
                       --------
   10 00000000         ;*******************************************************
                       *********
   11 00000000         ;Assembler directives
   12 00000000                 THUMB
   14 00000000         ;*******************************************************
                       *********
   15 00000000         ;EQUates
   16 00000000 00000001 
                       MULT2   EQU              1
   17 00000000 00000002 
                       MULT4   EQU              2
   18 00000000         ;Vectors
   19 00000000 000000C0 
                       VECTOR_TABLE_SIZE
                               EQU              0x000000C0
   20 00000000 00000004 
                       VECTOR_SIZE
                               EQU              4           ;Bytes per vector
   21 00000000         ;Stack
   22 00000000 00000100 
                       SSTACK_SIZE
                               EQU              0x00000100
   23 00000000         ;*******************************************************
                       *********
   24 00000000         ;Program
   25 00000000         ;Linker requires Reset_Handler
   26 00000000                 AREA             MyCode,CODE,READONLY
   27 00000000                 ENTRY
   28 00000000                 EXPORT           Reset_Handler
   29 00000000         Reset_Handler
   30 00000000         main
   31 00000000         ;-------------------------------------------------------
                       --------
   32 00000000         ;NEED TO FIND WAYS TO CHECK G and shift PQR for G
   33 00000000         ;>>>>> begin main program code <<<<<
   34 00000000         ;Load P,Q,&R into Registers for F
   35 00000000         ;Load P to R1
   36 00000000 495B            LDR              R1,=P
   37 00000002 6809            LDR              R1,[R1,#0]
   38 00000004         ;Load Q to R2
   39 00000004 4A5B            LDR              R2,=Q
   40 00000006 6812            LDR              R2,[R2,#0]
   41 00000008         ;Load R to R3
   42 00000008 4B5B            LDR              R3,=R
   43 0000000A 681B            LDR              R3,[R3,#0]
   44 0000000C         ;Equate F=2P-3Q+R+51, store F value in R4 (Should only u
                       se R0,R1,R2,R3,R4(;except check uses R7)(R0 is used by C
                       onst_F))



ARM Macro Assembler    Page 2 


   45 0000000C         ;Store -128 in a register so we can check range later 
   46 0000000C 2780            MOVS             R7, #128    ;Put 127 into R7
   47 0000000E         ;P expression, P=R1
   48 0000000E 004C            LSLS             R4,R1,#MULT2 ;Multiply P by 2, 
                                                            store result in R4
   49 00000010         ;check 
   50 00000010 2C7F            CMP              R4,#127     ;Compare register t
                                                            o 127
   51 00000012 DC7E            BGT              FUBAR1      ;Branch greater tha
                                                            n
   52 00000014 42FC            CMN              R4,R7       ;Compare register t
                                                            o -128
   53 00000016 DB7C            BLT              FUBAR1      ;Branch less than
   54 00000018         ;end check    
   55 00000018         ;Q term, Q=R2
   56 00000018 0050            LSLS             R0,R2,#MULT2 ;Multiply Q by 2, 
                                                            store result in R0
   57 0000001A         ;check 
   58 0000001A 287F            CMP              R0,#127     ;Compare register t
                                                            o 127
   59 0000001C DC79            BGT              FUBAR1      ;Branch greater tha
                                                            n
   60 0000001E 42F8            CMN              R0,R7       ;Compare register t
                                                            o -128
   61 00000020 DB77            BLT              FUBAR1      ;Branch less than
   62 00000022         ;end check
   63 00000022 1810            ADDS             R0,R2,R0    ;Add values of R0 a
                                                            nd Q, store values 
                                                            in R0
   64 00000024         ;check 
   65 00000024 287F            CMP              R0,#127     ;Compare register t
                                                            o 127
   66 00000026 DC74            BGT              FUBAR1      ;Branch greater tha
                                                            n
   67 00000028 42F8            CMN              R0,R7       ;Compare register t
                                                            o -128
   68 0000002A DB72            BLT              FUBAR1      ;Branch less than
   69 0000002C         ;end check
   70 0000002C 1A24            SUBS             R4,R4,R0    ;Subtract contents 
                                                            of R4 by R0, store 
                                                            value in R4
   71 0000002E         ;check 
   72 0000002E 2C7F            CMP              R4,#127     ;Compare register t
                                                            o 127
   73 00000030 DC6F            BGT              FUBAR1      ;Branch greater tha
                                                            n
   74 00000032 42FC            CMN              R4,R7       ;Compare register t
                                                            o -128
   75 00000034 DB6D            BLT              FUBAR1      ;Branch less than
   76 00000036         ;end check
   77 00000036         ;R term, R=R3
   78 00000036 18E4            ADDS             R4,R4,R3    ;Add contents of R4
                                                             and R, store value
                                                             in R4
   79 00000038         ;check 
   80 00000038 2C7F            CMP              R4,#127     ;Compare register t
                                                            o 127
   81 0000003A DC6A            BGT              FUBAR1      ;Branch greater tha
                                                            n



ARM Macro Assembler    Page 3 


   82 0000003C 42FC            CMN              R4,R7       ;Compare register t
                                                            o -128
   83 0000003E DB68            BLT              FUBAR1      ;Branch less than
   84 00000040         ;end check
   85 00000040         ;+51, R=R0
   86 00000040 484E            LDR              R0,=Const_F ;Load Register (Say
                                                             Const_F is R5)
   87 00000042 6800            LDR              R0,[R0,#0]  ;Load Value (Say R5
                                                             is value of R5 and
                                                             immediate 0)
   88 00000044 1824            ADDS             R4,R4,R0    ;Adds R0 to R4, sto
                                                            res value in R4
   89 00000046         ;check 
   90 00000046 2C7F            CMP              R4,#127     ;Compare register t
                                                            o 127
   91 00000048 DC63            BGT              FUBAR1      ;Branch greater tha
                                                            n
   92 0000004A 42FC            CMN              R4,R7       ;Compare register t
                                                            o -128
   93 0000004C DB61            BLT              FUBAR1      ;Branch less than
   94 0000004E         ;end check
   95 0000004E         ;Store F
   96 0000004E 484C            LDR              R0,=F       ;Load Register (Say
                                                             F is R4)
   97 00000050 6004            STR              R4,[R0,#0]  ;Store Value (Say R
                                                            4 is equal to R4 an
                                                            d immediate0)
   98 00000052         GoToG
   99 00000052         ;Load P,Q,&R into Registers fot G
  100 00000052         ;Load P to R1
  101 00000052 4947            LDR              R1,=P
  102 00000054 6809            LDR              R1,[R1,#0]
  103 00000056 0609            LSLS             R1,#24      ;Shift to most sign
                                                            ificant byte
  104 00000058         ;Load Q to R2
  105 00000058 4A46            LDR              R2,=Q
  106 0000005A 6812            LDR              R2,[R2,#0]
  107 0000005C 0612            LSLS             R2,#24      ;Shift to most sign
                                                            ificant byte
  108 0000005E         ;Load R to R3
  109 0000005E 4B46            LDR              R3,=R
  110 00000060 681B            LDR              R3,[R3,#0]
  111 00000062 061B            LSLS             R3,#24      ;Shift to most sign
                                                            ificant byte
  112 00000064         ;Check if negative
  113 00000064 2600            MOVS             R6,#0       ;Set R6 as 0
  114 00000066         ;Clear G
  115 00000066 2500            MOVS             R5,#0
  116 00000068         ;Equate G=5P-4Q-2R+7, store G value in R5 (Should only u
                       se R0,R1,R2,R3,R5 ((R0 is used for constant))
  117 00000068         ;P term, P=R1
  118 00000068 42F1            CMN              R1,R6       ;Check if negative
  119 0000006A DB6A            BLT              negativeP   ;Branch if negative
                                                             
  120 0000006C 008D            LSLS             R5,R1,#MULT4 ;Multiply P by 4, 
                                                            store vlaue in R5
  121 0000006E         ;Check Shift
  122 0000006E D262            BCS              FUBAR4
  123 00000070         ;End Check Shift



ARM Macro Assembler    Page 4 


  124 00000070 194D            ADDS             R5,R1,R5    ;Adds P and R5 (mul
                                                            tiplies by 5), stor
                                                            es value in R5
  125 00000072         G1
  126 00000072         ;Check Arithemtic
  127 00000072 D660            BVS              FUBAR4
  128 00000074         ;EndCheckArithmetic
  129 00000074         ;Q term, Q=R2
  130 00000074 42F2            CMN              R2,R6       ;Check if negative
  131 00000076 DB6C            BLT              negativeQ   ;Branch if negative
                                                             
  132 00000078 0090            LSLS             R0,R2,#MULT4 ;Multiplies Q by 4
                                                            , stores value in R
                                                            0
  133 0000007A         ;Check Shift
  134 0000007A D25C            BCS              FUBAR4
  135 0000007C         ;End Check Shift
  136 0000007C         G2
  137 0000007C 1A2D            SUBS             R5,R5,R0    ;Subtracts R5 by R0
                                                            , stores value in R
                                                            5
  138 0000007E         ;Check Arithemtic
  139 0000007E D65A            BVS              FUBAR4
  140 00000080         
  141 00000080         ;R term, R=R3
  142 00000080 42F3            CMN              R3,R6       ;Check if negative
  143 00000082 DB6D            BLT              negativeR   ;Branch if negative
                                                             
  144 00000084 0058            LSLS             R0,R3,#MULT2 ;Multiply R by 2, 
                                                            store vlaue in R0
  145 00000086         ;Check Shift
  146 00000086 D256            BCS              FUBAR4
  147 00000088         ;End Check Shift;
  148 00000088         G3
  149 00000088 1A2D            SUBS             R5,R5,R0    ;Subtract R5 by R0,
                                                             stores value in R5
                                                            
  150 0000008A         ;Check Arithemtic
  151 0000008A D654            BVS              FUBAR4
  152 0000008C         
  153 0000008C         ;+7
  154 0000008C 483D            LDR              R0,=Const_G ;Load Register (Say
                                                             Const_G is R6)
  155 0000008E 6800            LDR              R0,[R0,#0]  ;Load Value (Say R6
                                                             is value of R6 and
                                                             immediate 0)
  156 00000090 0600            LSLS             R0,R0,#24   ;Shift Constant
  157 00000092 182D            ADDS             R5,R5,R0    ;Adds R0 to conents
                                                             of R5
  158 00000094         ;Check Arithemtic
  159 00000094 D64F            BVS              FUBAR4
  160 00000096         ;Store G
  161 00000096 162D            ASRS             R5,#24      ;Shift back to leas
                                                            t signficant byte
  162 00000098 483B            LDR              R0,=G       ;Load Register (Say
                                                             G is R5)
  163 0000009A 6005            STR              R5,[R0,#0]  ;Store Value (Say R
                                                            5 is equal to R5 an
                                                            d immediate0)



ARM Macro Assembler    Page 5 


  164 0000009C         GoToH
  165 0000009C         ;Load P,Q,&R into Registers for H
  166 0000009C         ;Load P to R1
  167 0000009C 4934            LDR              R1,=P
  168 0000009E 6809            LDR              R1,[R1,#0]
  169 000000A0         ;Load Q to R2
  170 000000A0 4A34            LDR              R2,=Q
  171 000000A2 6812            LDR              R2,[R2,#0]
  172 000000A4         ;Load R to R3
  173 000000A4 4834            LDR              R0,=R
  174 000000A6 6803            LDR              R3,[R0,#0]
  175 000000A8         ;Clear R0
  176 000000A8 2000            MOVS             R0,#0
  177 000000AA         ;Equate H=P-2Q+R-91, store H value in R6 (Should only us
                       e R0,R1,R2,R3,R6 ((R7 is used for overflow check)(R0 is 
                       used for constant))
  178 000000AA         ;Store -128 in a register so we can check range later 
  179 000000AA 2780            MOVS             R7, #128    ;Put 128 into R7
  180 000000AC         ;P term, P=R1
  181 000000AC 000E            MOVS             R6,R1       ;Sets R6 equal to P
                                                            
  182 000000AE         ;Q term,Q=R2
  183 000000AE 0050            LSLS             R0,R2,#MULT2 ;Multiplies Q by 2
                                                            , stores value in R
                                                            0
  184 000000B0         ;check 
  185 000000B0 287F            CMP              R0,#127     ;Compare register t
                                                            o 127
  186 000000B2 DC34            BGT              FUBAR2      ;Branch greater tha
                                                            n
  187 000000B4 42F8            CMN              R0,R7       ;Compare register t
                                                            o -128
  188 000000B6 DB32            BLT              FUBAR2      ;Branch less than
  189 000000B8         ;end check 
  190 000000B8 1A36            SUBS             R6,R6,R0    ;Subtracts contents
                                                             of R6 by R0, store
                                                            s value in R6
  191 000000BA         ;check 
  192 000000BA 2E7F            CMP              R6,#127     ;Compare register t
                                                            o 127
  193 000000BC DC2F            BGT              FUBAR2      ;Branch greater tha
                                                            n
  194 000000BE 42FE            CMN              R6,R7       ;Compare register t
                                                            o -128
  195 000000C0 DB2D            BLT              FUBAR2      ;Branch less than
  196 000000C2         ;end check 
  197 000000C2         ;R term, Q=R3
  198 000000C2 18F6            ADDS             R6,R6,R3    ;Adds R to R6
  199 000000C4         ;check 
  200 000000C4 2E7F            CMP              R6,#127     ;Compare register t
                                                            o 127
  201 000000C6 DC2A            BGT              FUBAR2      ;Branch greater tha
                                                            n
  202 000000C8 42FE            CMN              R6,R7       ;Compare register t
                                                            o -128
  203 000000CA DB28            BLT              FUBAR2      ;Branch less than
  204 000000CC         ;end check 
  205 000000CC         ;-91
  206 000000CC 482F            LDR              R0,=Const_H ;Load Register (Say



ARM Macro Assembler    Page 6 


                                                             Const_G is R6)
  207 000000CE 6800            LDR              R0,[R0,#0]  ;Load Value (Say R6
                                                             is value of R6 and
                                                             immediate 0)
  208 000000D0 1836            ADDS             R6,R6,R0    ;Adds R0 to conents
                                                             of R6
  209 000000D2         ;check 
  210 000000D2 2E7F            CMP              R6,#127     ;Compare register t
                                                            o 127
  211 000000D4 DC23            BGT              FUBAR2      ;Branch greater tha
                                                            n
  212 000000D6 42FE            CMN              R6,R7       ;Compare register t
                                                            o -128
  213 000000D8 DB21            BLT              FUBAR2      ;Branch less than
  214 000000DA         ;end check 
  215 000000DA         ;Store H
  216 000000DA 482D            LDR              R0,=H       ;Load Register (Say
                                                             H is R6)
  217 000000DC 6006            STR              R6,[R0,#0]  ;Store Value (Say R
                                                            6 is equal to R6 an
                                                            d immediate0)
  218 000000DE         GoToResult
  219 000000DE         ;Equate Result=F+G+H, Store Result in R0
  220 000000DE 4928            LDR              R1,=F
  221 000000E0 6809            LDR              R1,[R1,#0]
  222 000000E2 4A29            LDR              R2,=G
  223 000000E4 6812            LDR              R2,[R2,#0]
  224 000000E6 4B2A            LDR              R3,=H
  225 000000E8 681B            LDR              R3,[R3,#0]
  226 000000EA         ;Clear R0
  227 000000EA 2000            MOVS             R0,#0       ;Clears R0 (idk wha
                                                            ts in there)
  228 000000EC         ;R0+=F
  229 000000EC 1840            ADDS             R0,R0,R1    ;Adds F to R0
  230 000000EE         ;check 
  231 000000EE 287F            CMP              R0,#127     ;Compare register t
                                                            o 127
  232 000000F0 DC1B            BGT              FUBAR3      ;Branch greater tha
                                                            n
  233 000000F2 42F8            CMN              R0,R7       ;Compare register t
                                                            o -128
  234 000000F4 DB19            BLT              FUBAR3      ;Branch less than
  235 000000F6         ;end check
  236 000000F6         ;R0+=G
  237 000000F6 1880            ADDS             R0,R0,R2    ;Adds G to R0
  238 000000F8         ;check 
  239 000000F8 287F            CMP              R0,#127     ;Compare register t
                                                            o 127
  240 000000FA DC16            BGT              FUBAR3      ;Branch greater tha
                                                            n
  241 000000FC 42F8            CMN              R0,R7       ;Compare register t
                                                            o -128
  242 000000FE DB14            BLT              FUBAR3      ;Branch less than
  243 00000100         ;end check
  244 00000100         ;R0+=H
  245 00000100 18C0            ADDS             R0,R0,R3    ;Adds H to R0
  246 00000102         ;check 
  247 00000102 287F            CMP              R0,#127     ;Compare register t
                                                            o 127



ARM Macro Assembler    Page 7 


  248 00000104 DC11            BGT              FUBAR3      ;Branch greater tha
                                                            n
  249 00000106 42F8            CMN              R0,R7       ;Compare register t
                                                            o -128
  250 00000108 DB0F            BLT              FUBAR3      ;Branch less than
  251 0000010A         ;end check
  252 0000010A         ;Store Result
  253 0000010A 4F22            LDR              R7,=Result  ;Load Register (Say
                                                             Result is R0)
  254 0000010C 6038            STR              R0,[R7,#0]  ;Store Value (Say R
                                                            0 is equal to R0 an
                                                            d immediate0)
  255 0000010E         
  256 0000010E         GoToEnd
  257 0000010E BF00            NOP
  258 00000110         ;>>>>>   end main program code <<<<<
  259 00000110         ;Stay here
  260 00000110 E7FE            B                .
  261 00000112         ;-------------------------------------------------------
                       --------
  262 00000112         ;>>>>> begin subroutine code <<<<<
  263 00000112         ;Store F if FUBAR1
  264 00000112         FUBAR1
  265 00000112 2400            MOVS             R4,#0       ;Clear R4
  266 00000114 4D1A            LDR              R5,=F       ;Load Register (Say
                                                             F is R4)
  267 00000116 602C            STR              R4,[R5,#0]  ;Store Value (Say R
                                                            4 is equal to R4 an
                                                            d immediate0)
  268 00000118         ;Not sure how this works but it brings you back to the m
                       ain code using the LR(R14 Register)
  269 00000118 4829            LDR              R0,=GoToG
  270 0000011A 4686            MOV              R14,R0
  271 0000011C 4770            BX               LR
  272 0000011E         ;Store H if FUBAR2
  273 0000011E         FUBAR2
  274 0000011E 2600            MOVS             R6,#0       ;Clear R6
  275 00000120 4F1B            LDR              R7,=H       ;Load Register (Say
                                                             H is R6)
  276 00000122 603E            STR              R6,[R7,#0]  ;Store Value (Say R
                                                            6 is equal to R6 an
                                                            d immediate0)
  277 00000124         ;Not sure how this works but it brings you back to the m
                       ain code using the LR(R14 Register)
  278 00000124 4828            LDR              R0,=GoToResult
  279 00000126 4686            MOV              R14,R0
  280 00000128 4770            BX               LR
  281 0000012A         ;Store Result if FUBAR3
  282 0000012A         FUBAR3
  283 0000012A 2000            MOVS             R0,#0       ;Clear R0
  284 0000012C 4819            LDR              R0,=Result  ;Load Register (Say
                                                             Result is R0)
  285 0000012E 6000            STR              R0,[R0,#0]  ;Store Value (Say R
                                                            0 is equal to R0 an
                                                            d immediate0)
  286 00000130         ;Not sure how this works but it brings you back to the m
                       ain code using the LR(R14 Register)
  287 00000130 4827            LDR              R0,=GoToEnd
  288 00000132 4686            MOV              R14,R0



ARM Macro Assembler    Page 8 


  289 00000134 4770            BX               LR
  290 00000136         ;Store G if FUBAR4
  291 00000136         FUBAR4
  292 00000136 2500            MOVS             R5,#0       ;Clear R5
  293 00000138 4E13            LDR              R6,=G       ;Load Register (Say
                                                             G is R5)
  294 0000013A 6035            STR              R5,[R6,#0]  ;Store Value (Say R
                                                            5 is equal to R and
                                                             immediat0 )
  295 0000013C         ;Not sure how this works but it brings you back to the m
                       ain code using the LR(R14 Register)
  296 0000013C 4826            LDR              R0,=GoToH
  297 0000013E 4686            MOV              R14,R0
  298 00000140 4770            BX               LR
  299 00000142         negativeP
  300 00000142 4249            RSBS             R1,R1,#0    ;Make it positive
  301 00000144 008D            LSLS             R5,R1,#MULT4 ;MULT4
  302 00000146 186D            ADDS             R5,R5,R1    ;MULT5
  303 00000148 426D            RSBS             R5,R5,#0    ;Make negative
  304 0000014A D6EE            BVS              FUBAR3      ;Check for Overflow
                                                            
  305 0000014C         ;Not sure how this works but it brings you back to the m
                       ain code using the LR(R14 Register)
  306 0000014C 4F23            LDR              R7,=G1
  307 0000014E 46BE            MOV              R14,R7
  308 00000150 4770            BX               LR
  309 00000152         negativeQ
  310 00000152 4252            RSBS             R2,R2,#0    ;Make it positive
  311 00000154 0090            LSLS             R0,R2,#MULT4 ;MULT4
  312 00000156 4240            RSBS             R0,R0,#0    ;Make negative
  313 00000158 D6E7            BVS              FUBAR3      ;Check for Overflow
                                                            
  314 0000015A         ;Not sure how this works but it brings you back to the m
                       ain code using the LR(R14 Register)
  315 0000015A 4F21            LDR              R7,=G2
  316 0000015C 46BE            MOV              R14,R7
  317 0000015E 4770            BX               LR
  318 00000160         negativeR
  319 00000160 425B            RSBS             R3,R3,#0    ;Make it positive
  320 00000162 0050            LSLS             R0,R2,#MULT2 ;MULT4
  321 00000164 4240            RSBS             R0,R0,#0    ;Make negative
  322 00000166 D6E0            BVS              FUBAR3      ;Check for Overflow
                                                            
  323 00000168         ;Not sure how this works but it brings you back to the m
                       ain code using the LR(R14 Register)
  324 00000168 481E            LDR              R0,=G3
  325 0000016A 46BE            MOV              R14,R7
  326 0000016C 4770            BX               LR
  327 0000016E         ;Check Carry of G
  328 0000016E         ;>>>>>   end subroutine code <<<<<
  329 0000016E 00 00           ALIGN
  330 00000170         ;*******************************************************
                       *********
  331 00000170         ;Vector Table Mapped to Address 0 at Reset
  332 00000170         ;Linker requires __Vectors to be exported
  333 00000170 00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 9 


              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             RESET, DATA, READONLY
  334 00000000                 EXPORT           __Vectors
  335 00000000                 EXPORT           __Vectors_End
  336 00000000                 EXPORT           __Vectors_Size
  337 00000000         __Vectors
  338 00000000         ;ARM core vectors
  339 00000000 00000000        DCD              __initial_sp ;00:end of stack
  340 00000004 00000000        DCD              Reset_Handler ;reset vector
  341 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 10 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00               SPACE            (VECTOR_TABLE_SIZE - (2 * VECTO
R_SIZE))
  342 000000C0         __Vectors_End
  343 000000C0 000000C0 
                       __Vectors_Size
                               EQU              __Vectors_End - __Vectors
  344 000000C0                 ALIGN
  345 000000C0         ;*******************************************************
                       *********
  346 000000C0         ;Constants
  347 000000C0                 AREA             MyConst,DATA,READONLY
  348 00000000         ;>>>>> begin constants here <<<<<
  349 00000000 00000033 
                       Const_F DCD              51          ;Constant F
  350 00000004 00000007 
                       Const_G DCD              7           ;Constant G
  351 00000008 FFFFFFA5 
                       Const_H DCD              -91         ;Constant H
  352 0000000C         ;>>>>>   end constants here <<<<<
  353 0000000C         ;*******************************************************
                       *********
  354 0000000C                 AREA             |.ARM.__at_0x1FFFE000|,DATA,REA
DWRITE,ALIGN=3
  355 00000000                 EXPORT           __initial_sp



ARM Macro Assembler    Page 11 


  356 00000000         ;Allocate system stack
  357 00000000                 IF               :LNOT::DEF:SSTACK_SIZE
  359                          ENDIF
  360 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 12 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       Stack_Mem
                               SPACE            SSTACK_SIZE
  361 00000100         __initial_sp
  362 00000100         ;*******************************************************
                       *********
  363 00000100         ;Variables
  364 00000100                 AREA             MyData,DATA,READWRITE
  365 00000000         ;>>>>> begin variables here <<<<<
  366 00000000 00 00 00 
              00       F       SPACE            4           ;Variable F, Word
  367 00000004 00 00 00 
              00       G       SPACE            4           ;Variable G, Word
  368 00000008 00 00 00 
              00       H       SPACE            4           ;Variable H, Word
  369 0000000C 00 00 00 
              00       P       SPACE            4           ;Variable P, Word
  370 00000010 00 00 00 
              00       Q       SPACE            4           ;Variable Q, Word
  371 00000014 00 00 00 
              00       R       SPACE            4           ;Variable R, Word
  372 00000018 00 00 00 
              00       Result  SPACE            4           ;Variable Result, W
                                                            ord
  373 0000001C         ;>>>>>   end variables here <<<<<
  374 0000001C                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=inter
work --depend=.\objects\exercise03.d -o.\objects\exercise03.o -ID:\Assembly\Exe
rcise03\RTE -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.10.0\Device\Include -
IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISIO
N_VERSION SETA 518" --predefine="MKL46Z256xxx4 SETA 1" --list=.\listings\exerci



ARM Macro Assembler    Page 13 


se03.lst Exercise03.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FUBAR1 00000112

Symbol: FUBAR1
   Definitions
      At line 264 in file Exercise03.s
   Uses
      At line 51 in file Exercise03.s
      At line 53 in file Exercise03.s
      At line 59 in file Exercise03.s
      At line 61 in file Exercise03.s
      At line 66 in file Exercise03.s
      At line 68 in file Exercise03.s
      At line 73 in file Exercise03.s
      At line 75 in file Exercise03.s
      At line 81 in file Exercise03.s
      At line 83 in file Exercise03.s
      At line 91 in file Exercise03.s
      At line 93 in file Exercise03.s

FUBAR2 0000011E

Symbol: FUBAR2
   Definitions
      At line 273 in file Exercise03.s
   Uses
      At line 186 in file Exercise03.s
      At line 188 in file Exercise03.s
      At line 193 in file Exercise03.s
      At line 195 in file Exercise03.s
      At line 201 in file Exercise03.s
      At line 203 in file Exercise03.s
      At line 211 in file Exercise03.s
      At line 213 in file Exercise03.s

FUBAR3 0000012A

Symbol: FUBAR3
   Definitions
      At line 282 in file Exercise03.s
   Uses
      At line 232 in file Exercise03.s
      At line 234 in file Exercise03.s
      At line 240 in file Exercise03.s
      At line 242 in file Exercise03.s
      At line 248 in file Exercise03.s
      At line 250 in file Exercise03.s
      At line 304 in file Exercise03.s
      At line 313 in file Exercise03.s
      At line 322 in file Exercise03.s

FUBAR4 00000136

Symbol: FUBAR4
   Definitions
      At line 291 in file Exercise03.s
   Uses
      At line 122 in file Exercise03.s
      At line 127 in file Exercise03.s
      At line 134 in file Exercise03.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 139 in file Exercise03.s
      At line 146 in file Exercise03.s
      At line 151 in file Exercise03.s
      At line 159 in file Exercise03.s

G1 00000072

Symbol: G1
   Definitions
      At line 125 in file Exercise03.s
   Uses
      At line 306 in file Exercise03.s
Comment: G1 used once
G2 0000007C

Symbol: G2
   Definitions
      At line 136 in file Exercise03.s
   Uses
      At line 315 in file Exercise03.s
Comment: G2 used once
G3 00000088

Symbol: G3
   Definitions
      At line 148 in file Exercise03.s
   Uses
      At line 324 in file Exercise03.s
Comment: G3 used once
GoToEnd 0000010E

Symbol: GoToEnd
   Definitions
      At line 256 in file Exercise03.s
   Uses
      At line 287 in file Exercise03.s
Comment: GoToEnd used once
GoToG 00000052

Symbol: GoToG
   Definitions
      At line 98 in file Exercise03.s
   Uses
      At line 269 in file Exercise03.s
Comment: GoToG used once
GoToH 0000009C

Symbol: GoToH
   Definitions
      At line 164 in file Exercise03.s
   Uses
      At line 296 in file Exercise03.s
Comment: GoToH used once
GoToResult 000000DE

Symbol: GoToResult
   Definitions
      At line 218 in file Exercise03.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 278 in file Exercise03.s
Comment: GoToResult used once
MyCode 00000000

Symbol: MyCode
   Definitions
      At line 26 in file Exercise03.s
   Uses
      None
Comment: MyCode unused
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 29 in file Exercise03.s
   Uses
      At line 28 in file Exercise03.s
      At line 340 in file Exercise03.s

main 00000000

Symbol: main
   Definitions
      At line 30 in file Exercise03.s
   Uses
      None
Comment: main unused
negativeP 00000142

Symbol: negativeP
   Definitions
      At line 299 in file Exercise03.s
   Uses
      At line 119 in file Exercise03.s
Comment: negativeP used once
negativeQ 00000152

Symbol: negativeQ
   Definitions
      At line 309 in file Exercise03.s
   Uses
      At line 131 in file Exercise03.s
Comment: negativeQ used once
negativeR 00000160

Symbol: negativeR
   Definitions
      At line 318 in file Exercise03.s
   Uses
      At line 143 in file Exercise03.s
Comment: negativeR used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 333 in file Exercise03.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 337 in file Exercise03.s
   Uses
      At line 334 in file Exercise03.s
      At line 343 in file Exercise03.s

__Vectors_End 000000C0

Symbol: __Vectors_End
   Definitions
      At line 342 in file Exercise03.s
   Uses
      At line 335 in file Exercise03.s
      At line 343 in file Exercise03.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Const_F 00000000

Symbol: Const_F
   Definitions
      At line 349 in file Exercise03.s
   Uses
      At line 86 in file Exercise03.s
Comment: Const_F used once
Const_G 00000004

Symbol: Const_G
   Definitions
      At line 350 in file Exercise03.s
   Uses
      At line 154 in file Exercise03.s
Comment: Const_G used once
Const_H 00000008

Symbol: Const_H
   Definitions
      At line 351 in file Exercise03.s
   Uses
      At line 206 in file Exercise03.s
Comment: Const_H used once
MyConst 00000000

Symbol: MyConst
   Definitions
      At line 347 in file Exercise03.s
   Uses
      None
Comment: MyConst unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.ARM.__at_0x1FFFE000 00000000

Symbol: .ARM.__at_0x1FFFE000
   Definitions
      At line 354 in file Exercise03.s
   Uses
      None
Comment: .ARM.__at_0x1FFFE000 unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 360 in file Exercise03.s
   Uses
      None
Comment: Stack_Mem unused
__initial_sp 00000100

Symbol: __initial_sp
   Definitions
      At line 361 in file Exercise03.s
   Uses
      At line 339 in file Exercise03.s
      At line 355 in file Exercise03.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

F 00000000

Symbol: F
   Definitions
      At line 366 in file Exercise03.s
   Uses
      At line 96 in file Exercise03.s
      At line 220 in file Exercise03.s
      At line 266 in file Exercise03.s

G 00000004

Symbol: G
   Definitions
      At line 367 in file Exercise03.s
   Uses
      At line 162 in file Exercise03.s
      At line 222 in file Exercise03.s
      At line 293 in file Exercise03.s

H 00000008

Symbol: H
   Definitions
      At line 368 in file Exercise03.s
   Uses
      At line 216 in file Exercise03.s
      At line 224 in file Exercise03.s
      At line 275 in file Exercise03.s

MyData 00000000

Symbol: MyData
   Definitions
      At line 364 in file Exercise03.s
   Uses
      None
Comment: MyData unused
P 0000000C

Symbol: P
   Definitions
      At line 369 in file Exercise03.s
   Uses
      At line 36 in file Exercise03.s
      At line 101 in file Exercise03.s
      At line 167 in file Exercise03.s

Q 00000010

Symbol: Q
   Definitions
      At line 370 in file Exercise03.s
   Uses
      At line 39 in file Exercise03.s
      At line 105 in file Exercise03.s
      At line 170 in file Exercise03.s

R 00000014



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: R
   Definitions
      At line 371 in file Exercise03.s
   Uses
      At line 42 in file Exercise03.s
      At line 109 in file Exercise03.s
      At line 173 in file Exercise03.s

Result 00000018

Symbol: Result
   Definitions
      At line 372 in file Exercise03.s
   Uses
      At line 253 in file Exercise03.s
      At line 284 in file Exercise03.s

8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

MULT2 00000001

Symbol: MULT2
   Definitions
      At line 16 in file Exercise03.s
   Uses
      At line 48 in file Exercise03.s
      At line 56 in file Exercise03.s
      At line 144 in file Exercise03.s
      At line 183 in file Exercise03.s
      At line 320 in file Exercise03.s

MULT4 00000002

Symbol: MULT4
   Definitions
      At line 17 in file Exercise03.s
   Uses
      At line 120 in file Exercise03.s
      At line 132 in file Exercise03.s
      At line 301 in file Exercise03.s
      At line 311 in file Exercise03.s

SSTACK_SIZE 00000100

Symbol: SSTACK_SIZE
   Definitions
      At line 22 in file Exercise03.s
   Uses
      At line 360 in file Exercise03.s
Comment: SSTACK_SIZE used once
VECTOR_SIZE 00000004

Symbol: VECTOR_SIZE
   Definitions
      At line 20 in file Exercise03.s
   Uses
      At line 341 in file Exercise03.s
Comment: VECTOR_SIZE used once
VECTOR_TABLE_SIZE 000000C0

Symbol: VECTOR_TABLE_SIZE
   Definitions
      At line 19 in file Exercise03.s
   Uses
      At line 341 in file Exercise03.s
Comment: VECTOR_TABLE_SIZE used once
__Vectors_Size 000000C0

Symbol: __Vectors_Size
   Definitions
      At line 343 in file Exercise03.s
   Uses
      At line 336 in file Exercise03.s
Comment: __Vectors_Size used once
6 symbols
376 symbols in table
