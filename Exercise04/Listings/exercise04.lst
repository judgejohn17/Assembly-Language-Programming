


ARM Macro Assembler    Page 1 


    1 00000000         ;Iterations and Subroutines 
    2 00000000         ;*******************************************************
                       *********
    3 00000000         ;This exercise tests my knowledge of iterations and subr
                       outines 
    4 00000000         ;Essentialy, it divides two numbers 
    5 00000000         ;Name:  John Judge
    6 00000000         ;Date:  2/18/16
    7 00000000         ;Class:  CMPE-250
    8 00000000         ;Section:  Section 02 Thursdays, 2:00PM-3:50PM
    9 00000000         ;-------------------------------------------------------
                       --------
   10 00000000         ;Keil Simulator Template for KL46
   11 00000000         ;R. W. Melton
   12 00000000         ;January 23, 2015
   13 00000000         ;*******************************************************
                       *********
   14 00000000         ;Assembler directives
   15 00000000                 THUMB
   17 00000000         ;*******************************************************
                       *********
   18 00000000         ;EQUates
   19 00000000 00000019 
                       MAX_DATA
                               EQU              25
   20 00000000         ;Vectors
   21 00000000 000000C0 
                       VECTOR_TABLE_SIZE
                               EQU              0x000000C0
   22 00000000 00000004 
                       VECTOR_SIZE
                               EQU              4           ;Bytes per vector
   23 00000000         ;Stack
   24 00000000 00000100 
                       SSTACK_SIZE
                               EQU              0x00000100
   25 00000000         ;*******************************************************
                       *********
   26 00000000         ;Program
   27 00000000         ;Linker requires Reset_Handler
   28 00000000                 AREA             MyCode,CODE,READONLY
   29 00000000                 ENTRY
   30 00000000                 EXPORT           Reset_Handler
   31 00000000         Reset_Handler
   32 00000000         main
   33 00000000         ;-------------------------------------------------------
                       --------
   34 00000000         ;>>>>> begin main program code <<<<<
   35 00000000 F7FF FFFE       BL               InitData    ;(2.e)
   36 00000004         Petunia
   37 00000004 F7FF FFFE       BL               LoadData    ;(2.f)
   38 00000008 D216            BCS              Quit
   39 0000000A 491C            LDR              R1,=P       ;Load P to R1
   40 0000000C 6809            LDR              R1,[R1,#0]
   41 0000000E 481C            LDR              R0,=Q       ;Load Q to R0
   42 00000010 6800            LDR              R0,[R0,#0]
   43 00000012         
   44 00000012 F000 F812       BL               DIVU        ;Call DIVU (2.g)
   45 00000016 D204            BCS              INVALID     ;Branch if Carry is



ARM Macro Assembler    Page 2 


                                                             set, Division was 
                                                            valis (2.h)
   46 00000018         
   47 00000018 4A18            LDR              R2,=P       ;Load Register (Say
                                                             P is R0)
   48 0000001A 6010            STR              R0,[R2,#0]  ;Store Value (Say R
                                                            1 is equal to R1 an
                                                            d immediate0)
   49 0000001C 4A18            LDR              R2,=Q       ;Load Register (Say
                                                             Q is R0)
   50 0000001E 6011            STR              R1,[R2,#0]  ;Store Value (Say R
                                                            0 is equal to R0 an
                                                            d immediate0)
   51 00000020 E007            B                Mulaney
   52 00000022         INVALID
   53 00000022         
   54 00000022         ;Store P
   55 00000022 2000            MOVS             R0,#0       ;Set R0 to 0
   56 00000024 43C0            MVNS             R0,R0       ;Set R0=P=FFFFFFFF
   57 00000026 4A15            LDR              R2,=P       ;Load Register (Say
                                                             P is R0)
   58 00000028 6010            STR              R0,[R2,#0]  ;Store Value (Say R
                                                            1 is equal to R1 an
                                                            d immediate0)
   59 0000002A         ;Store Q
   60 0000002A 2100            MOVS             R1,#0       ;Set R1 to 0
   61 0000002C 43C9            MVNS             R1,R1       ;Set R1=q=FFFFFFFF
   62 0000002E 4A14            LDR              R2,=Q       ;Load Register (Say
                                                             Q is R0)
   63 00000030 6011            STR              R1,[R2,#0]  ;Store Value (Say R
                                                            0 is equal to R0 an
                                                            d immediate0)
   64 00000032         
   65 00000032         Mulaney
   66 00000032 F7FF FFFE       BL               TestData    ;(2.i) Call TestDat
                                                            a, checks division,
                                                             stores results in 
                                                            Results Array
   67 00000036 E7E5            B                Petunia
   68 00000038         Quit
   69 00000038         ;>>>>>   end main program code <<<<<
   70 00000038         ;Stay here
   71 00000038 E7FE            B                .
   72 0000003A         ;-------------------------------------------------------
                       --------
   73 0000003A         ;>>>>> begin subroutine code <<<<<
   74 0000003A         DIVU
   75 0000003A B404            PUSH             {R2}        ;store R2 Value
   76 0000003C 2200            MOVS             R2,#0       ;move 0 to R2 for q
                                                            uotient
   77 0000003E 2800            CMP              R0,#0       ;Compare divisor to
                                                             0
   78 00000040 D010            BEQ              SETCARRY    ;if divisor = 0 go 
                                                            to SETCARRY
   79 00000042         
   80 00000042         WHILE
   81 00000042 4281            CMP              R1,R0       ;Compare R1 to R0
   82 00000044 D302            BLO              ENDWHILE    ;if dividend<Diviso
                                                            r End loop



ARM Macro Assembler    Page 3 


   83 00000046 1C52            ADDS             R2,R2,#1    ;Add 1 to quotient
   84 00000048 1A09            SUBS             R1,R1,R0    ;Dividend - divisor
                                                            
   85 0000004A E7FA            B                WHILE       ;branch to start of
                                                             while
   86 0000004C         
   87 0000004C         ENDWHILE
   88 0000004C 0010            MOVS             R0,R2       ;move quotient to R
                                                            0, so R0 remainder 
                                                            R1
   89 0000004E BC04            POP              {R2}        ;revert R2 to value
                                                             before subroutine
   90 00000050 B403            PUSH             {R0,R1}     ;push R0 and R1
   91 00000052 F3EF 8000       MRS              R0,APSR     ;Set C flag to 0
   92 00000056 2120            MOVS             R1,#0x20    ;
   93 00000058 0609            LSLS             R1,#24      ;Shift 24 places (t
                                                            o most significant 
                                                            byte)
   94 0000005A 4388            BICS             R0,R0,R1    ; 
   95 0000005C F380 8800       MSR              APSR,R0     ; 
   96 00000060 BC03            POP              {R0,R1}     ;revert R0 and R1 t
                                                            o answer 
   97 00000062 4770            BX               LR          ;Go back to program
                                                            
   98 00000064         SETCARRY
   99 00000064 BC04            POP              {R2}        ;Pop R2
  100 00000066 B403            PUSH             {R0,R1}     ;Store R0 and R1
  101 00000068 F3EF 8000       MRS              R0,APSR     ;Set C flag to 1
  102 0000006C 2120            MOVS             R1,#0x20    ;
  103 0000006E 0609            LSLS             R1,#24      ;Shift 24 places (t
                                                            o most significant 
                                                            byte)
  104 00000070 4308            ORRS             R0,R0,R1    ;
  105 00000072 F380 8800       MSR              APSR,R0     ;
  106 00000076 BC03            POP              {R0,R1}     ;Revert R0 and R1 t
                                                            o answer
  107 00000078 4770            BX               LR          ;Go back to program
                                                             
  108 0000007A         
  109 0000007A         ;>>>>>   end subroutine code <<<<<
  110 0000007A 00 00           ALIGN
  111 0000007C         ;*******************************************************
                       *********
  112 0000007C         ;Machine code provided for Exercise Four
  113 0000007C         ;R. W. Melton 9/14/2015
  114 0000007C         ;Place at the end of your MyCode AREA
  115 0000007C 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             |.ARM.__at_0x4000|,CODE,READONL
Y
  116 00000000 2600 2700 
                       InitData
                               DCI.W            0x26002700
  117 00000004 4770            DCI              0x4770
  118 00000006 B40F A316 
                       LoadData



ARM Macro Assembler    Page 4 


                               DCI.W            0xB40FA316
  119 0000000A 19DB A13D       DCI.W            0x19DBA13D
  120 0000000E 428B D209       DCI.W            0x428BD209
  121 00000012 CB03 4A10       DCI.W            0xCB034A10
  122 00000016 4B11 6010       DCI.W            0x4B116010
  123 0000001A 6019 3708       DCI.W            0x60193708
  124 0000001E 2000 0840       DCI.W            0x20000840
  125 00000022 BC0F 4770       DCI.W            0xBC0F4770
  126 00000026 2001 0840       DCI.W            0x20010840
  127 0000002A E7FA            DCI              0xE7FA
  128 0000002C B40F 480C 
                       TestData
                               DCI.W            0xB40F480C
  129 00000030 A134 19C0       DCI.W            0xA13419C0
  130 00000034 19C9 3808       DCI.W            0x19C93808
  131 00000038 3908 4A07       DCI.W            0x39084A07
  132 0000003C 4B07 6812       DCI.W            0x4B076812
  133 00000040 681B C00C       DCI.W            0x681BC00C
  134 00000044 6808 4290       DCI.W            0x68084290
  135 00000048 D104 6848       DCI.W            0xD1046848
  136 0000004C 4298 D101       DCI.W            0x4298D101
  137 00000050 BC0F 4770       DCI.W            0xBC0F4770
  138 00000054 1C76 E7FB       DCI.W            0x1C76E7FB
  139 00000058                 ALIGN
  140 00000058 00000000 
                       PPtr    DCD              P
  141 0000005C 00000000 
                       QPtr    DCD              Q
  142 00000060 00000000 
                       ResultsPtr
                               DCD              Results
  143 00000064 00000000 
              00000000 
              00000001 
              00000000         DCQ              0x0000000000000000,0x0000000000
000001
  144 00000074 00000000 
              00000001 
              00000010 
              00000001         DCQ              0x0000000100000000,0x0000000100
000010
  145 00000084 00000010 
              00000002 
              00000010 
              00000004         DCQ              0x0000000200000010,0x0000000400
000010
  146 00000094 00000010 
              00000008 
              00000010 
              00000010         DCQ              0x0000000800000010,0x0000001000
000010
  147 000000A4 00000010 
              00000020 
              00000007 
              00000001         DCQ              0x0000002000000010,0x0000000100
000007
  148 000000B4 00000007 
              00000002 
              00000007 



ARM Macro Assembler    Page 5 


              00000003         DCQ              0x0000000200000007,0x0000000300
000007
  149 000000C4 00000007 
              00000004 
              00000007 
              00000005         DCQ              0x0000000400000007,0x0000000500
000007
  150 000000D4 00000007 
              00000006 
              00000007 
              00000007         DCQ              0x0000000600000007,0x0000000700
000007
  151 000000E4 00000007 
              00000008 
              80000000 
              80000000         DCQ              0x0000000800000007,0x8000000080
000000
  152 000000F4 80000000 
              80000001 
              FFFFFFFF 
              000F0000         DCQ              0x8000000180000000,0x000F0000FF
FFFFFF
  153 00000104 FFFFFFFF 
              FFFFFFFF 
              FFFFFFFF 
              FFFFFFFF         DCQ              0xFFFFFFFFFFFFFFFF,0xFFFFFFFFFF
FFFFFF
  154 00000114 00000000 
              00000000 
              00000010 
              00000000         DCQ              0x0000000000000000,0x0000000000
000010
  155 00000124 00000008 
              00000000 
              00000004 
              00000000         DCQ              0x0000000000000008,0x0000000000
000004
  156 00000134 00000002 
              00000000 
              00000001 
              00000000         DCQ              0x0000000000000002,0x0000000000
000001
  157 00000144 00000000 
              00000010 
              00000007 
              00000000         DCQ              0x0000001000000000,0x0000000000
000007
  158 00000154 00000003 
              00000001 
              00000002 
              00000001         DCQ              0x0000000100000003,0x0000000100
000002
  159 00000164 00000001 
              00000003 
              00000001 
              00000002         DCQ              0x0000000300000001,0x0000000200
000001
  160 00000174 00000001 
              00000001 



ARM Macro Assembler    Page 6 


              00000001 
              00000000         DCQ              0x0000000100000001,0x0000000000
000001
  161 00000184 00000000 
              00000007 
              00000001 
              00000000         DCQ              0x0000000700000000,0x0000000000
000001
  162 00000194 00000000 
              80000000 
              00001111 
              0000FFFF         DCQ              0x8000000000000000,0x0000FFFF00
001111
  163 000001A4                 ALIGN
  164 000001A4         ;*******************************************************
                       *********
  165 000001A4         ;*******************************************************
                       *********
  166 000001A4         ;Vector Table Mapped to Address 0 at Reset
  167 000001A4         ;Linker requires __Vectors to be exported
  168 000001A4                 AREA             RESET, DATA, READONLY
  169 00000000                 EXPORT           __Vectors
  170 00000000                 EXPORT           __Vectors_End
  171 00000000                 EXPORT           __Vectors_Size
  172 00000000         __Vectors
  173 00000000         ;ARM core vectors
  174 00000000 00000000        DCD              __initial_sp ;00:end of stack
  175 00000004 00000000        DCD              Reset_Handler ;reset vector
  176 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 7 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00               SPACE            (VECTOR_TABLE_SIZE - (2 * VECTO
R_SIZE))
  177 000000C0         __Vectors_End
  178 000000C0 000000C0 
                       __Vectors_Size
                               EQU              __Vectors_End - __Vectors
  179 000000C0                 ALIGN
  180 000000C0         ;*******************************************************
                       *********
  181 000000C0         ;Constants
  182 000000C0                 AREA             MyConst,DATA,READONLY
  183 00000000         ;>>>>> begin constants here <<<<<
  184 00000000         ;>>>>>   end constants here <<<<<
  185 00000000                 ALIGN
  186 00000000         ;*******************************************************
                       *********
  187 00000000                 AREA             |.ARM.__at_0x1FFFE000|,DATA,REA
DWRITE,ALIGN=3
  188 00000000                 EXPORT           __initial_sp
  189 00000000         ;Allocate system stack
  190 00000000                 IF               :LNOT::DEF:SSTACK_SIZE
  192                          ENDIF
  193 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 8 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 9 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       Stack_Mem
                               SPACE            SSTACK_SIZE
  194 00000100         __initial_sp
  195 00000100                 ALIGN
  196 00000100         ;*******************************************************
                       *********
  197 00000100         ;Variables
  198 00000100                 AREA             MyData,DATA,READWRITE
  199 00000000         ;>>>>> begin variables here <<<<<
  200 00000000 00 00 00 
              00       P       SPACE            4           ;Variable P, Word
  201 00000004 00 00 00 
              00       Q       SPACE            4           ;Variable Q, Word
  202 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 10 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Results SPACE            (2*MAX_DATA*4) 
                                                            ;Word Array with 
  203 000000D0                 ALIGN
  204 000000D0         ;>>>>>   end variables here <<<<<
  205 000000D0                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=inter
work --depend=.\objects\exercise04.d -o.\objects\exercise04.o -ID:\Assembly\Exe
rcise04\RTE -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.10.0\Device\Include -
IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISIO
N_VERSION SETA 518" --predefine="MKL46Z256xxx4 SETA 1" --list=.\listings\exerci
se04.lst Exercise04.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DIVU 0000003A

Symbol: DIVU
   Definitions
      At line 74 in file Exercise04.s
   Uses
      At line 44 in file Exercise04.s
Comment: DIVU used once
ENDWHILE 0000004C

Symbol: ENDWHILE
   Definitions
      At line 87 in file Exercise04.s
   Uses
      At line 82 in file Exercise04.s
Comment: ENDWHILE used once
INVALID 00000022

Symbol: INVALID
   Definitions
      At line 52 in file Exercise04.s
   Uses
      At line 45 in file Exercise04.s
Comment: INVALID used once
Mulaney 00000032

Symbol: Mulaney
   Definitions
      At line 65 in file Exercise04.s
   Uses
      At line 51 in file Exercise04.s
Comment: Mulaney used once
MyCode 00000000

Symbol: MyCode
   Definitions
      At line 28 in file Exercise04.s
   Uses
      None
Comment: MyCode unused
Petunia 00000004

Symbol: Petunia
   Definitions
      At line 36 in file Exercise04.s
   Uses
      At line 67 in file Exercise04.s
Comment: Petunia used once
Quit 00000038

Symbol: Quit
   Definitions
      At line 68 in file Exercise04.s
   Uses
      At line 38 in file Exercise04.s
Comment: Quit used once
Reset_Handler 00000000

Symbol: Reset_Handler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 31 in file Exercise04.s
   Uses
      At line 30 in file Exercise04.s
      At line 175 in file Exercise04.s

SETCARRY 00000064

Symbol: SETCARRY
   Definitions
      At line 98 in file Exercise04.s
   Uses
      At line 78 in file Exercise04.s
Comment: SETCARRY used once
WHILE 00000042

Symbol: WHILE
   Definitions
      At line 80 in file Exercise04.s
   Uses
      At line 85 in file Exercise04.s
Comment: WHILE used once
main 00000000

Symbol: main
   Definitions
      At line 32 in file Exercise04.s
   Uses
      None
Comment: main unused
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.ARM.__at_0x4000 00000000

Symbol: .ARM.__at_0x4000
   Definitions
      At line 115 in file Exercise04.s
   Uses
      None
Comment: .ARM.__at_0x4000 unused
InitData 00000000

Symbol: InitData
   Definitions
      At line 116 in file Exercise04.s
   Uses
      At line 35 in file Exercise04.s
Comment: InitData used once
LoadData 00000006

Symbol: LoadData
   Definitions
      At line 118 in file Exercise04.s
   Uses
      At line 37 in file Exercise04.s
Comment: LoadData used once
PPtr 00000058

Symbol: PPtr
   Definitions
      At line 140 in file Exercise04.s
   Uses
      None
Comment: PPtr unused
QPtr 0000005C

Symbol: QPtr
   Definitions
      At line 141 in file Exercise04.s
   Uses
      None
Comment: QPtr unused
ResultsPtr 00000060

Symbol: ResultsPtr
   Definitions
      At line 142 in file Exercise04.s
   Uses
      None
Comment: ResultsPtr unused
TestData 0000002C

Symbol: TestData
   Definitions
      At line 128 in file Exercise04.s
   Uses
      At line 66 in file Exercise04.s
Comment: TestData used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 168 in file Exercise04.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 172 in file Exercise04.s
   Uses
      At line 169 in file Exercise04.s
      At line 178 in file Exercise04.s

__Vectors_End 000000C0

Symbol: __Vectors_End
   Definitions
      At line 177 in file Exercise04.s
   Uses
      At line 170 in file Exercise04.s
      At line 178 in file Exercise04.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyConst 00000000

Symbol: MyConst
   Definitions
      At line 182 in file Exercise04.s
   Uses
      None
Comment: MyConst unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.ARM.__at_0x1FFFE000 00000000

Symbol: .ARM.__at_0x1FFFE000
   Definitions
      At line 187 in file Exercise04.s
   Uses
      None
Comment: .ARM.__at_0x1FFFE000 unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 193 in file Exercise04.s
   Uses
      None
Comment: Stack_Mem unused
__initial_sp 00000100

Symbol: __initial_sp
   Definitions
      At line 194 in file Exercise04.s
   Uses
      At line 174 in file Exercise04.s
      At line 188 in file Exercise04.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyData 00000000

Symbol: MyData
   Definitions
      At line 198 in file Exercise04.s
   Uses
      None
Comment: MyData unused
P 00000000

Symbol: P
   Definitions
      At line 200 in file Exercise04.s
   Uses
      At line 39 in file Exercise04.s
      At line 47 in file Exercise04.s
      At line 57 in file Exercise04.s
      At line 140 in file Exercise04.s

Q 00000004

Symbol: Q
   Definitions
      At line 201 in file Exercise04.s
   Uses
      At line 41 in file Exercise04.s
      At line 49 in file Exercise04.s
      At line 62 in file Exercise04.s
      At line 141 in file Exercise04.s

Results 00000008

Symbol: Results
   Definitions
      At line 202 in file Exercise04.s
   Uses
      At line 142 in file Exercise04.s
Comment: Results used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

MAX_DATA 00000019

Symbol: MAX_DATA
   Definitions
      At line 19 in file Exercise04.s
   Uses
      At line 202 in file Exercise04.s
Comment: MAX_DATA used once
SSTACK_SIZE 00000100

Symbol: SSTACK_SIZE
   Definitions
      At line 24 in file Exercise04.s
   Uses
      At line 193 in file Exercise04.s
Comment: SSTACK_SIZE used once
VECTOR_SIZE 00000004

Symbol: VECTOR_SIZE
   Definitions
      At line 22 in file Exercise04.s
   Uses
      At line 176 in file Exercise04.s
Comment: VECTOR_SIZE used once
VECTOR_TABLE_SIZE 000000C0

Symbol: VECTOR_TABLE_SIZE
   Definitions
      At line 21 in file Exercise04.s
   Uses
      At line 176 in file Exercise04.s
Comment: VECTOR_TABLE_SIZE used once
__Vectors_Size 000000C0

Symbol: __Vectors_Size
   Definitions
      At line 178 in file Exercise04.s
   Uses
      At line 171 in file Exercise04.s
Comment: __Vectors_Size used once
5 symbols
369 symbols in table
